/*
Минимум

Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.

*/


// Решение

// function min(a, b) {
//     if (a < b) return a;
//     else return b;
// }

// console.log(min(0, 10));
// // → 0
// console.log(min(0, -10));
// // → -10




/*

Рекурсия


Мы видели, что оператор % (остаток от деления) может использоваться для определения того,
чётное ли число ( % 2). А вот ещё один способ определения:
Ноль чётный.
Единица нечётная.
У любого числа N чётность такая же, как у N - 2.
Напишите рекурсивную функцию isEven согласно этим правилам.

Она должна принимать число и возвращать булевское значение.
Потестируйте её на 50 и 75. Попробуйте задать ей -1.
Почему она ведёт себя таким образом? Можно ли её как-то исправить?

*/



// Решение



// function isEven(n) {
//     if (n == 0) return true;
//     else if (n == 1) return false;
//     else if (n < 0) return isEven(-n);
//     else return isEven(n - 2);
// }

// console.log(isEven(50));
// // → true
// console.log(isEven(75));
// // → false
// console.log(isEven(-1));
// // → false






/*


Считаем бобы
Символ номер N строки можно получить, добавив к ней .charAt(N) ( "строчка".charAt(5) ) – 
схожим образом с получением длины строки при помощи .length. 
Возвращаемое значение будет строковым, состоящим из одного символа (к примеру, "к"). 
У первого символа строки позиция 0, что означает, что у последнего символа позиция будет string.length - 1. 
Другими словами, у строки из двух символов длина 2, а позиции её символов будут 0 и 1.
Напишите функцию countBs, которая принимает строку в качестве аргумента, 
и возвращает количество символов “B”, содержащихся в строке.
Затем напишите функцию countChar, которая работает примерно как countBs, 
только принимает второй параметр — символ, который мы будем искать в строке 
(вместо того, чтобы просто считать количество символов “B”). 
Для этого переделайте функцию countBs.



*/



// Решение




// function countChar(string, ch) {
//     let counted = 0;
//     for (let i = 0; i < string.length; i++) {
//         if (string[i] == ch) {
//             counted += 1;
//         }
//     }
//     return counted;
// }

// function countBs(string) {
//     return countChar(string, "B");
// }

// console.log(countBs("BBC"));
// // → 2
// console.log(countChar("kakkerlak", "k"));
// // → 4